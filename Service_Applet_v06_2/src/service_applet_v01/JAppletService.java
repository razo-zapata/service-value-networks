
 /* To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JAppletService.java
 *
 * Created on May 24, 2011, 2:44:40 PM
 */

package service_applet_v01;

//import java.io.IOException;

import java.util.Vector;
import java.util.HashSet;
import java.util.Iterator;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.ResIterator;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.rdf.model.StmtIterator;
import com.hp.hpl.jena.util.FileManager;
import com.hp.hpl.jena.vocabulary.RDF;
import java.awt.Color;
import java.util.Scanner;

import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.ListSelectionModel;

import java.util.Random;

import java.util.Collections;

//DATE AND TIME
import java.util.Calendar;
import java.text.SimpleDateFormat;

import java.io.*;

/**
 *
 * @author ivan
 */
public class JAppletService extends javax.swing.JApplet {
    
   String newline = "\n";
   RDF_Utilities MyRDFU = new RDF_Utilities();
   int Column_Wants;
   
   Vector<Resource> RequiredFCs = new Vector<Resource>();
   Vector<Resource> qualityConsequencesForWant = new Vector<Resource>();
   Vector<Resource> scales4QCs = new Vector<Resource>();
   Vector <Resource> mustHaveConseqNominal = new Vector<Resource>();
   
   Scanner scan;
   Vector<Model> FinalSolutions = new Vector<Model>();
   Vector<Model> TmpSolutions = new Vector<Model>();
   Vector<Model> TmpCandidates = new Vector<Model>();
   
   Model model;
   Model modelSupplier;
   // path inputfiles CC-HRM
   //static final String inputFileName  ="CC-HRM-Customer-Need-01.rdf";
   //static final String inputFileName  ="catalogues//CC-HRM//CC-HRM-Customer-Need-02-Reporter.rdf";
   //static final String inputFileName  ="catalogues//CC-HRM//CC-HRM-Customer-Need-03-MCreator.rdf";
   static final String inputFileName  ="catalogues//CC-HRM//CC-HRM-Customer-Need-04-MCreator.rdf";
   
   //static final String inputFileNameSupplier  ="CC-HRM-Suppliers-03.rdf";
   //static final String inputFileNameSupplier  ="catalogues//CC-HRM//CC-HRM-Suppliers-and-Enablers-06-MCreator.rdf";
   //static final String inputFileNameSupplier  ="catalogues//CC-HRM//CC-HRM-Suppliers-and-Enablers-07-MCreator.rdf";
   //static final String inputFileNameSupplier  ="catalogues//CC-HRM//CC-HRM-Suppliers-and-Enablers-08-MCreator.rdf";
   //static final String inputFileNameSupplier  ="catalogues//CC-HRM//CC-HRM-Suppliers-and-Enablers-09-MCreator.rdf";
   static final String inputFileNameSupplier  ="catalogues//CC-HRM//CC-HRM-Suppliers-and-Enablers-10-MCreator.rdf";
   
   // New stuff
   B2B MyB2B;
   Model MyModel;
   Resource MyVA;
   Resource MyEA;
   Resource MyBundle2Export;
   int InitialID;
   
   int DefaultScore;
   
   int FC_ID;
   
   Copy_SVN MyCopier;
   
    /** Initializes the applet JAppletService */
    @Override
    public void init() {
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                    FC_ID = 1;
                    DefaultScore = 10;
                    load_catalogues();
                    
                    // Hide some panels
                    jPanel_OldControls.setVisible(false);
                    //jPanel_Tradde_off.setVisible(false);
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel_OldControls = new javax.swing.JPanel();
        jTB_SortR = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabelTmp = new javax.swing.JLabel();
        jToggleButton2 = new javax.swing.JToggleButton();
        jPanel_Tradde_off = new javax.swing.JPanel();
        jL_TradeoffC = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTCritique_SB = new javax.swing.JTable();
        jToggleButton9 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jLabelServiceB = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jT_SBs = new javax.swing.JTable();
        jToggleButton8 = new javax.swing.JToggleButton();
        jTB_SortP = new javax.swing.JToggleButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jT_Wants = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jCB_Needs = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jCB_GFCs = new javax.swing.JComboBox();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jT_QCs = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jTB_SortR.setText("Reputation");
        jTB_SortR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_SortRActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabelTmp.setText("D");

        jToggleButton2.setText("Load");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_OldControlsLayout = new javax.swing.GroupLayout(jPanel_OldControls);
        jPanel_OldControls.setLayout(jPanel_OldControlsLayout);
        jPanel_OldControlsLayout.setHorizontalGroup(
            jPanel_OldControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_OldControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToggleButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addGap(17, 17, 17)
                .addComponent(jLabelTmp)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTB_SortR, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        jPanel_OldControlsLayout.setVerticalGroup(
            jPanel_OldControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_OldControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_OldControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel_OldControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTB_SortR)
                        .addComponent(jToggleButton2)
                        .addComponent(jLabelTmp))))
        );

        jL_TradeoffC.setText("Tradde off  Consequences:");

        jTCritique_SB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Services", "Consequences", "Preference  [0-10]"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTCritique_SB);

        jToggleButton9.setText("Trade-off");
        jToggleButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton9ActionPerformed(evt);
            }
        });

        jToggleButton7.setText("OK");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel_Tradde_offLayout = new javax.swing.GroupLayout(jPanel_Tradde_off);
        jPanel_Tradde_off.setLayout(jPanel_Tradde_offLayout);
        jPanel_Tradde_offLayout.setHorizontalGroup(
            jPanel_Tradde_offLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Tradde_offLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel_Tradde_offLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel_Tradde_offLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 991, Short.MAX_VALUE)
                        .addGroup(jPanel_Tradde_offLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel_Tradde_offLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jToggleButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                            .addGroup(jPanel_Tradde_offLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jToggleButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))))
                    .addComponent(jL_TradeoffC))
                .addContainerGap())
        );
        jPanel_Tradde_offLayout.setVerticalGroup(
            jPanel_Tradde_offLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_Tradde_offLayout.createSequentialGroup()
                .addComponent(jL_TradeoffC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel_Tradde_offLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel_Tradde_offLayout.createSequentialGroup()
                        .addComponent(jToggleButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton7))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jLabelServiceB.setText("Solutions:");

        jT_SBs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SVNs", "Fitness", "Num. Services"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jT_SBs.setCellSelectionEnabled(true);
        jScrollPane5.setViewportView(jT_SBs);

        jToggleButton8.setText("Select");
        jToggleButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton8ActionPerformed(evt);
            }
        });

        jTB_SortP.setText("Fitness");
        jTB_SortP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTB_SortPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelServiceB)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1092, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTB_SortP, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabelServiceB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTB_SortP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton8))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8))
        );

        jLabel4.setText("Detailed FCs:");

        jT_Wants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jT_Wants.setColumnSelectionAllowed(true);
        jT_Wants.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_WantsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jT_Wants);
        jT_Wants.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jButton1.setText("Score selected FCs");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addContainerGap(1141, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1082, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        jLabel1.setText("Needs:");

        jCB_Needs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("High-Level Functional Consequences (FCs):");

        jCB_GFCs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jToggleButton1.setText("Select");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("Select");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(4, 4, 4)
                                .addComponent(jCB_Needs, 0, 1023, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jCB_GFCs, 0, 1061, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jCB_Needs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCB_GFCs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jT_QCs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Functional Consequence", "Preference [0 - 10]"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jT_QCs);

        jButton2.setText("Find Solutions");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Scoring Consequences:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1091, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel_Tradde_off, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(22, 22, 22))
                    .addComponent(jPanel_OldControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel_Tradde_off, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel_OldControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        jLabelTmp.setForeground(Color.red);
        jTextArea1.append("HOLA" + newline);

        // Retrive the group of functional consequences based on the selected need.
        KeyValuePair ThisPair = (KeyValuePair) jCB_Needs.getSelectedItem();
        // ThisPair - R_URI, R_Label
        jTextArea1.append("Selected Need: " + ThisPair.Get_URI());
        Resource Selected_Need = model.getResource(ThisPair.Get_URI());

        Vector<Resource> chosenNeed = new Vector<Resource>();
        chosenNeed.add(Selected_Need);
            
        /* Get initial set of consequences that specify the need, by following the relationship specified_by
            */
        
        Vector<Resource> conseq = MyRDFU.getRelatedObjects(
                chosenNeed, model,"http://www.cs.vu.nl/~gordijn/e3value#specified_by");
        
        // Displaying Group of Functional Consequences
        // a.k.a. High-level FCs
        jCB_GFCs.removeAllItems();
        for(int i = 0; i < conseq.size(); i++)
        {
            String ThisFC = conseq.get(i).getProperty(B2B.e3_has_name).getObject().toString();
            String FC_URI = conseq.get(i).getURI().toString();
            jCB_GFCs.addItem(new KeyValuePair(FC_URI, ThisFC));
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:

        load_catalogues();
        
        // End Loading catalogues
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:

        // Clear all tables:       

        // Clear table for Quality Consequences
        DefaultTableModel modelTQCs = new DefaultTableModel();
        ((DefaultTableModel)jT_QCs.getModel()).setRowCount(0);
        modelTQCs = (DefaultTableModel) jT_QCs.getModel();
        
        // Clear table for Service Bundles
        DefaultTableModel modelTSB = new DefaultTableModel();
        ((DefaultTableModel)jT_SBs.getModel()).setRowCount(0);
        modelTSB = (DefaultTableModel) jT_SBs.getModel();

        // Clear table for Tradde-off Consequences
        DefaultTableModel modelTCritique = new DefaultTableModel();
        ((DefaultTableModel)jTCritique_SB.getModel()).setRowCount(0);
        modelTCritique = (DefaultTableModel) jTCritique_SB.getModel();
        
        // Get more FCs by the relationship consists of
        jT_Wants.removeAll();

        scales4QCs.removeAllElements();
        RequiredFCs.removeAllElements();

        // Create New MyModel
        MyModel = ModelFactory.createDefaultModel();
        MyB2B.Generate_Diagram_and_Model(MyModel);

        // Generate Customer
        /*Resource ThisNeed = chosenNeed.firstElement();*/
        //Resource MyVA = MyB2B.Generate_Value_Activity(MyModel,ThisNeed.getProperty(B2B.e3_has_name).getObject().toString());
        MyVA = MyB2B.Generate_Value_Activity(MyModel," Customer Need ");
        MyEA = MyB2B.Generate_Elementary_Actor(MyModel,"CUSTOMER",true);
        MyB2B.Assign_Activity_to_Actor(MyModel, MyVA, MyEA,null);
        

        KeyValuePair ThisPair = (KeyValuePair) jCB_GFCs.getSelectedItem();
        Resource This_FC = model.getResource(ThisPair.Get_URI());
        Vector<Resource> conseq  = new Vector<Resource>();
        conseq.add(This_FC);
        GetGroupsOfConsequencesViaWants(conseq, model);
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        // Clear table for Service Bundle
        DefaultTableModel modelTSB = new DefaultTableModel();
        ((DefaultTableModel)jT_SBs.getModel()).setRowCount(0);
        modelTSB = (DefaultTableModel) jT_SBs.getModel();

        // Clear table for Critique
        DefaultTableModel modelTCritiqueSB = new DefaultTableModel();
        ((DefaultTableModel)jTCritique_SB.getModel()).setRowCount(0);
        modelTCritiqueSB = (DefaultTableModel) jTCritique_SB.getModel();

        // Score selected want
        
        //jTextArea1.append(" === WANTS ===  " + newline);
        //jTextArea1.append(" Column " + Column_Wants + newline);

        int Count_Row = 0;
        RequiredFCs = new Vector<Resource>();

        KeyValuePair KVPFC =  (KeyValuePair) jT_Wants.getValueAt(0,Column_Wants);

        qualityConsequencesForWant = new Vector<Resource>();

        scales4QCs.removeAllElements();

        DefaultTableModel modelTQCs = new DefaultTableModel();
        ((DefaultTableModel)jT_QCs.getModel()).setRowCount(0);
        modelTQCs = (DefaultTableModel) jT_QCs.getModel();
        
        if(KVPFC != null)
        {
            int k = 0;
            while(KVPFC != null)
            {
                //jTextArea1.append(" FC0 : " + KVPFC.Get_Label() + newline);
                //jTextArea1.append(" FC1 : " + KVPFC.Get_URI() + newline);
                //System.out.println("\n FC0 : " + KVPFC.Get_Label() + "\t FC1 : " + KVPFC.Get_URI());
                Resource ThisFC1 = model.getResource(KVPFC.Get_URI());
                Resource ThisFC = MyB2B.Look_for_Resource(MyB2B.FConsequence, B2B.e3_has_name, KVPFC.Get_Label(), modelSupplier);
                
                

                Vector<Resource> TmpThisFC = new Vector<Resource>();
                TmpThisFC.add(ThisFC);
                //jTextArea1.append(" FC2 : " + ThisFC.getProperty(B2B.e3_has_name).getObject().toString() + newline);
                //System.out.println("\n FC2 : " + ThisFC.getProperty(B2B.e3_has_name).getObject().toString());

                // Get QCs based on ThisFC
                //Vector<Resource> TheseQCs = MyRDFU.getRelatedObjects(TmpThisFC, model, "http://www.cs.vu.nl/~gordijn/e3value#depends_on");
                //Vector<Resource> Scale = MyRDFU.getRelatedObjects(TheseQCs, model, "http://www.cs.vu.nl/~gordijn/e3value#has_scale");
                Vector<Resource> TheseQCs = MyRDFU.getRelatedObjects(TmpThisFC, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#depends_on");
                Vector<Resource> Scale = MyRDFU.getRelatedObjects(TheseQCs, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#has_scale");
                
                for (int i = 0; i < Scale.size(); i++)
                {
                    Resource ThisScale = Scale.get(i);
                    //jTextArea1.append("     Scale : " + ThisScale.getProperty(B2B.e3_has_name).getObject().toString() + newline);
                    //System.out.println("\n      Scale : " + ThisScale.getProperty(B2B.e3_has_name).getObject().toString());
                }              

                for (int i = 0; i < TheseQCs.size(); i++)
                {
                    Resource ThisQC = TheseQCs.get(i);
                    //jTextArea1.append("     QC : " + ThisQC.getProperty(B2B.e3_has_name).getObject().toString() + newline);
                    //System.out.println("\n      QC : " + ThisQC.getProperty(B2B.e3_has_name).getObject().toString());
                }
                
                /*Vector<KeyValuePair> ThisVNull = new Vector<KeyValuePair>();
                for(int i = 0; i < 4; i++)
                {
                    KeyValuePair ThisValue = new KeyValuePair("" + i,"" + i);
                    ThisVNull.add(ThisValue);
                }*/

                //System.out.println(" numScales : " + Scale.size());
                //KeyValuePair DefaultScore = new KeyValuePair("", "0", (Double) 0.0);
                for(int i = 0; i < Scale.size(); i++)
                {
                    Resource ThisScale = Scale.get(i);
                    // Allowing the same scale for different FCs
                    //if(!scales4QCs.contains(ThisScale))
                    //{
                        scales4QCs.add(ThisScale);
                        //System.out.println(" Si-Again-numScales : " + Scale.size());

                        Vector<KeyValuePair> MyRow = new Vector<KeyValuePair>();
                        
                        KeyValuePair MyFC = new KeyValuePair(KVPFC.Get_URI(),KVPFC.Get_Label());
                        //jT_QCs.setValueAt(MyFC, Count_Row, 0);
                        MyRow.add(MyFC);
                        
                        KeyValuePair MyScale = new KeyValuePair(ThisScale.getURI().toString(),ThisScale.getProperty(B2B.e3_has_name).getObject().toString());
                        //jT_QCs.setValueAt(MyScale, Count_Row, 1);
                        MyRow.add(MyScale);
                        
                        for(int j = 0; j < TheseQCs.size(); j++)
                        {
                            if(j > 0)
                            {
                                //modelTQCs.addRow(ThisVNull);
                                MyRow = new Vector<KeyValuePair>();
                                MyRow.add(null);
                                MyRow.add(null);
                            }
                            
                            Resource ThisQC = TheseQCs.get(j);
                            KeyValuePair MyQC = new KeyValuePair(ThisQC.getURI().toString(),ThisQC.getProperty(B2B.e3_has_name).getObject().toString());
                            //jT_QCs.setValueAt(MyQC, Count_Row, 2);
                            MyRow.add(MyQC);
                            //MyRow.add(DefaultScore);
                            
                            // Adding Quality Consequences
                            qualityConsequencesForWant.add(ThisQC);
                            Count_Row++;
                            
                            modelTQCs.addRow(MyRow);
                        }
                        
                    //}
                }
                // Filling Up vector of FCs
                RequiredFCs.add(ThisFC);

                // Next Iteration
                k++;
                //System.out.println("\n K : " + k + " Column_Wants : " + Column_Wants);
                if(k < jT_Wants.getRowCount())
                {
                    //System.out.println("\n Still OK " + jT_Wants.getRowCount());
                    KVPFC =  (KeyValuePair) jT_Wants.getValueAt(k,Column_Wants);
                }
                else
                {
                    //System.out.println("\n No more " + jT_Wants.getRowCount());
                    KVPFC = null;
                }
                
            }

            for(int i=0; i< scales4QCs.size(); i++)
            {
                //System.out.println(" Scale = " + scales4QCs.get(i).getProperty(B2B.e3_has_name).getObject().toString());
            }

        }
        else
        {
            //jTextArea1.append(" Invalid selection " + newline);
        }
        Random generator2 = new Random(0);
        int RanInt = 0;

        for(int i = 0; i < jT_QCs.getRowCount(); i++)
        {
            RanInt = generator2.nextInt(9);
            jT_QCs.setValueAt(DefaultScore, i, 1);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jT_WantsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_WantsMouseClicked
        // TODO add your handling code here:

        JTableHeader header = jT_Wants.getTableHeader();

        TableColumnModel columns = header.getColumnModel();

        if (!columns.getColumnSelectionAllowed())
            return;

        //int
        Column_Wants = header.columnAtPoint(evt.getPoint());

        if (Column_Wants == -1)
            return;

        int count = jT_Wants.getRowCount();

        if (count != 0)
            jT_Wants.setRowSelectionInterval(0, count - 1);

        ListSelectionModel selection = columns.getSelectionModel();

        if (evt.isShiftDown())
        {
            int anchor = selection.getAnchorSelectionIndex();
            int lead = selection.getLeadSelectionIndex();

            if (anchor != -1)
            {
                boolean old = selection.getValueIsAdjusting();
                selection.setValueIsAdjusting(true);

                boolean anchorSelected = selection.isSelectedIndex(anchor);

                if (lead != -1)
                {
                    if (anchorSelected)
                        selection.removeSelectionInterval(anchor, lead);
                    else
                        selection.addSelectionInterval(anchor, lead);
                    // The latter is quite unintuitive.
                }

                if (anchorSelected)
                    selection.addSelectionInterval(anchor, Column_Wants);
                else
                    selection.removeSelectionInterval(anchor, Column_Wants);

                selection.setValueIsAdjusting(old);
            }
            else
                selection.setSelectionInterval(Column_Wants, Column_Wants);
        }
        else
        {
            if (evt.isControlDown())
            {
                if (selection.isSelectedIndex(Column_Wants))
                    selection.removeSelectionInterval(Column_Wants, Column_Wants);
                else
                    selection.addSelectionInterval(Column_Wants, Column_Wants);
            }
            else
            {
                selection.setSelectionInterval(Column_Wants, Column_Wants);
            }
        }

        //jTextArea1.append(" Column " + Column_Wants + newline);
    }//GEN-LAST:event_jT_WantsMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        // Clear table for Service Bundle
        DefaultTableModel modelTSB = new DefaultTableModel();
        ((DefaultTableModel)jT_SBs.getModel()).setRowCount(0);
        modelTSB = (DefaultTableModel) jT_SBs.getModel();

        // Clear table for Critique
        DefaultTableModel modelTCritiqueSB = new DefaultTableModel();
        ((DefaultTableModel)jTCritique_SB.getModel()).setRowCount(0);
        modelTCritiqueSB = (DefaultTableModel) jTCritique_SB.getModel();

        // Preferences
        Vector<Vector<Double>> preferenceScoresPerScale = new Vector<Vector<Double>>();
        Vector<Double> defaultScores = new Vector<Double>();
        
        Vector<Resource> solutions = new Vector<Resource>();

        // From Sybren's code
        Vector<Resource> functionalConsequenceSupplier = MyRDFU.getType(modelSupplier, "functional_consequence");
                
        /*for(int i = 0; i < functionalConsequenceSupplier.size(); i++)
        {
            Resource ThisR = functionalConsequenceSupplier.get(i);
            jTextArea1.append(ThisR.getProperty(B2B.e3_has_name).getObject().toString() + newline);
        }*/
        
        Vector<Resource> qualityConsequenceSupplier = MyRDFU.getType(modelSupplier, "quality_consequence");
        //System.out.println("All quality consequences on the supplier side are: \n");
        //printVectorLits(qualityConsequenceSupplier,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name" );
        /*for(int i = 0; i < qualityConsequenceSupplier.size(); i++)
        {
            Resource ThisR = qualityConsequenceSupplier.get(i);
            jTextArea1.append(ThisR.getProperty(B2B.e3_has_name).getObject().toString() + newline);
        }*/
        
        
        Vector<Scale> supplierScales = MyRDFU.getScaledConseq(qualityConsequenceSupplier, modelSupplier);
        Vector <Scale> matchedScales = new Vector <Scale>();
        
        /*for(int i = 0; i < supplierScales.size(); i++)
        {
            Scale ThisR = supplierScales.get(i);
            jTextArea1.append(ThisR.getScaleName() + newline);
        }*/
        
        //match conumer-supplier scale, assuming that scale names are unique
        
        //Vector<Resource> conseqScales = scales4QCs;

        //Vector<Scale> conseqScales = MyRDFU.getScaledConseq(qualityConsequencesForWant, model);
        Vector<Scale> conseqScales = MyRDFU.getScaledConseq(qualityConsequencesForWant, modelSupplier);

        for (int i = 0; i < conseqScales.size(); i ++)
        {
            //System.out.println(" Exploring : " + conseqScales.get(i).getScaleName());
            for (int j = 0; j < supplierScales.size(); j ++)
            {
                //System.out.println(" against : " + supplierScales.get(i).getScaleName());
                if (conseqScales.get(i).getScaleName().equals(supplierScales.get(j).getScaleName()))
                {
                    matchedScales.add(supplierScales.get(j));
                }
            }
        }
        
        Vector<Resource> functionalConsequences = RequiredFCs;
        Vector<Resource> matchedFunctionalConsequences = MyRDFU.matchConsumerSupplierConsequences(functionalConsequences, functionalConsequenceSupplier);
        
        // matchedFunctionalConsequences - supplier side
        // matchedScales - supplier side

        // Checking
        System.out.println("\n These are the required FCs : ");
        for(int i = 0; i < RequiredFCs.size(); i++)
        {
            System.out.println("\n\t FC = " + RequiredFCs.get(i).getProperty(B2B.e3_has_name).getObject().toString());
        }
        
        
        // we need the existing consequence scales from the consumer side for
        // the mapping consequences <==> preference scores.
        // This is because the creation of scales on the basis of consequences is
        // randomized when no ranking on is imposed on the consequences.
        Vector <Scale>  matchedScalesConsumerSide = new Vector<Scale>();
        for (int i = 0; i < conseqScales.size(); i ++)
        {
            for (int j = 0; j < supplierScales.size(); j ++)
            {
                if (supplierScales.get(j).getScaleName().equals(conseqScales.get(i).getScaleName()))
                {
                    matchedScalesConsumerSide.add(conseqScales.get(i));
                }
            }
        }


        // matchedFunctionalConsequences - supplier side
        // matchedScales - supplier side
        // matchedScalesConsumerSide - customer side
        //for(int l = 0; l < conseqVec.size(); l ++)
        Random generator2 = new Random(0);
        Double MyValue = null;
        for(int j = 0; j < matchedScalesConsumerSide.size(); j ++)
        {
            for(int l = 0; l < matchedScalesConsumerSide.size(); l ++)
            {
                defaultScores.add(0.0);
                //MyValue = generator2.nextDouble();
                //defaultScores.add(MyValue);
            }
            defaultScores.setElementAt(1.0, j);

            //MyValue = generator2.nextDouble();
            //defaultScores.setElementAt(MyValue, j);
            preferenceScoresPerScale.add(defaultScores);
        }
        
        
        //Vector <Resource> mustHaveConseqNominal = new Vector<Resource>();
        mustHaveConseqNominal = new Vector<Resource>();

        for(int i = 0; i < matchedScales.size(); i ++)
        {
            if (conseqScales.get(i).getClass().toString().equals("class svn_composition_v02.NominalScale"))
            {
                NominalScale blaat = (NominalScale)matchedScalesConsumerSide.get(i);
                for(int j = 0; j < blaat.getNominalScaleAsResourceVector().size(); j ++)
                {
                    if (preferenceScoresPerScale.get(i).get(j) ==1.0)
                    {
                        mustHaveConseqNominal.add(blaat.getNominalScaleAsResourceVector().get(j));
                    }
                }
            }
        }


        Vector<Resource> rabarber = new Vector<Resource>();
        rabarber.addAll( mustHaveConseqNominal);
        mustHaveConseqNominal.clear();
        mustHaveConseqNominal.addAll(MyRDFU.matchConsumerSupplierConsequences(rabarber, qualityConsequenceSupplier));
        mustHaveConseqNominal.addAll(matchedFunctionalConsequences);
        //System.out.println("\n");
        //System.out.println("We now reason from consequence to service interface, via service property, resource and service port. Below, we show this reasoning for the functional consequences. \n");
        for(int i=0; i < mustHaveConseqNominal.size(); i++)
        {
            //System.out.println("MHCN : " + mustHaveConseqNominal.get(i).getProperty(B2B.e3_has_name).getObject().toString());
        }
        
        


        //walk from functional consequence to service interface
        Vector<Resource> serviceProperties = MyRDFU.getRelatedObjects(matchedFunctionalConsequences, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#has_property");
        //System.out.println("service properties for the functional consequences:");
        //printVectorLits(serviceProperties,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name" );
        Vector<Resource> resources= MyRDFU.getRelatedObjects(serviceProperties, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#has_resource");
        //System.out.println("resources that contain the  service properties");
        //printVectorLits(resources,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name" );
        Vector<Resource> additionalResources = MyRDFU.getRelatedObjects(matchedFunctionalConsequences, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#consequence_has_resource");
        if (additionalResources.size() !=0)
        {
            resources.addAll(additionalResources);
            //System.out.println("Additional resources based upon which consequences are defined: ");
            //printVectorLits(additionalResources,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name" );
        }
        

        //Vector<Resource> servicePorts=getRelatedObjects(resources, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#vo_offered_requested_by_vp");
        Vector<Resource> servicePorts = MyRDFU.get_special_ports(resources, modelSupplier,"http://www.cs.vu.nl/~gordijn/e3value#vo_offered_requested_by_vp");
        //System.out.println("The service ports that contain the resources:");
        //printVectorLits(servicePorts,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name");
        //Vector<Resource>serviceInterfaces = getRelatedObjects(servicePorts, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#part_of");
        Vector<Resource>serviceInterfaces = MyRDFU.getRelatedObjects(MyRDFU.getRelatedObjects(servicePorts, modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#vp_in_vo"),modelSupplier, "http://www.cs.vu.nl/~gordijn/e3value#vo_in_vi");
        
        // printSupplierReasoning(serviceProperties, resources, servicePorts, matchedFunctionalConsequences);
        //System.out.println("The service interfaces that contain the ports:");
        //printVectorLits(serviceInterfaces,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name" );

        // ================================== Connecting customer with TOP Suppliers ================================
        Vector<Resource> solutionCandidates = new Vector<Resource>();

        for(int i = 0; i < serviceInterfaces.size(); i++)
        {
            Resource VI_TMP = serviceInterfaces.get(i);
            
            // Supplier side
            Resource MyVI2 = MyB2B.Generate_Value_Interface(MyModel);
            //  Copy everything that is in the Service Providers side
            String SVI_TMP = VI_TMP.getProperty(B2B.vi_assigned_to_ac).getObject().toString();
            Resource TmpSecondActor = modelSupplier.getResource(SVI_TMP);
            Resource MySecondActor = MyB2B.Generate_Elementary_Actor(MyModel,TmpSecondActor.getProperty(B2B.e3_has_name).getObject().toString(),true);
            //
            MyB2B.Copy_Value_Interfaces(modelSupplier, VI_TMP, MyModel, MyVI2, false);
            // Assign the SECOND value_interface to the SECOND actor
            MyModel.add(MyVI2, B2B.vi_assigned_to_ac, MySecondActor);
            MyModel.add(MySecondActor, B2B.ac_has_vi, MyVI2);
            MyB2B.Copy_Activities_in_Flow(MyModel, MySecondActor, MyVI2, null, modelSupplier, TmpSecondActor, VI_TMP);

            // Add Actor to solutionCandidates
            if (!solutionCandidates.contains(MySecondActor))
            {
                solutionCandidates.add(MySecondActor);
                //System.out.println(" Adding : " + MySecondActor.getProperty(B2B.e3_has_name).getObject().toString());
            }
      }
      
      /*
      Aqui!!!!!!
      ///
      //printModel();

      */

      // Generate Bundles
      // Bundling!!!!!
      
      Vector<KeyValuePair> scoresperFCs = new Vector<KeyValuePair>();
      int NumQCs = jT_QCs.getRowCount();
      System.out.println(" Number of QCs : " + NumQCs);
      for(int i = 0; i < NumQCs; i++)
      {
         KeyValuePair ThisCustomerFC = (KeyValuePair) jT_QCs.getValueAt(i, 0);
         int ThisScore = (Integer) jT_QCs.getValueAt(i, 1);
         
         System.out.println(" QC : " + ThisCustomerFC.Get_Label() + " - value : " + ThisScore);

         KeyValuePair MyTriple = new KeyValuePair(ThisCustomerFC.Get_URI(), ThisCustomerFC.Get_Label(), ThisScore);
         scoresperFCs.add(MyTriple);
      }
      
      
      solutions = MyRDFU.Generate_Bundles(modelSupplier,mustHaveConseqNominal,solutionCandidates, MyModel, MyB2B);
      //System.out.println(" ");
      System.out.println(" Number of Service Value Networks : " + solutions.size());
      jLabelServiceB.setText("Service Value Networks : " + solutions.size());
      
      // Fill jT_SBs
      //Random
      generator2 = new Random(19);
      //Double
      MyValue = null;
      int MyValueInt = 0;

      for(int i = 0; i < solutions.size(); i++)
      {
          Vector<KeyValuePair> ThisRow= new Vector<KeyValuePair>();
          Resource ThisB = solutions.get(i);

          // Adding Bundle ID
          KeyValuePair SB_ID = new KeyValuePair(ThisB.getURI().toString(),ThisB.getProperty(B2B.e3_has_name).getObject().toString());
          ThisRow.add(SB_ID);

          // Adding "Quality"
          Vector<Resource> consequencesBundle = MyRDFU.getFCsFromBundle(ThisB, MyModel);
          
          //Double Rank = generator2.nextDouble();//MyRDFU.doScoringBundle(consequencesBundle, matchedScales, preferenceScoresPerScale, MyModel);
          //Double Rank = MyRDFU.doScoringBundle2(consequencesBundle, matchedScales, scoresperScale, MyModel);
          //Double Rank = 0.0;
          //KeyValuePair SB_QC = new KeyValuePair("12",""+Rank);
          //ThisRow.add(SB_QC);

          // Adding Fitness
          consequencesBundle = MyRDFU.getFCsFromBundle(ThisB, MyModel);
          Double MyFitness = MyRDFU.getFitness(consequencesBundle, RequiredFCs, scoresperFCs, MyModel);
          KeyValuePair SB_Fitness = new KeyValuePair("12",""+MyFitness);
          ThisRow.add(SB_Fitness);
          
          // Adding Num. of Services
          Vector<Resource> SB_Services  = new Vector<Resource>();
          SB_Services = MyRDFU.getServicesFromBundle(ThisB, MyModel);
          //System.out.println(" numServices: " + SB_Services.size());
          KeyValuePair SB_NServices = new KeyValuePair("12",""+SB_Services.size());
          ThisRow.add(SB_NServices);
          
          modelTSB.addRow(ThisRow);
      }
      // Sort by quality
      sortThisColumn(1);

      // Export all bundles
      print_all_bundles();
              
      // Next brace is the end of bundling
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTB_SortPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_SortPActionPerformed
        // TODO add your handling code here:
        sortThisColumn(1);
    }//GEN-LAST:event_jTB_SortPActionPerformed

    private void jTB_SortRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTB_SortRActionPerformed
        // TODO add your handling code here:

        /*jT_SBs.setAutoCreateColumnsFromModel(false);
        
        // Sorting table
        DefaultTableModel modelTSB = new DefaultTableModel();
        modelTSB = (DefaultTableModel) jT_SBs.getModel();
        sortAllRowsBy(modelTSB, 3, false);*/
    }//GEN-LAST:event_jTB_SortRActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        // TODO add your handling code here:
        // Generate the RDF file - complete SVN
        
        if(MyBundle2Export == null)
        {
            System.out.println("\n The Model Cannot be generated ");
        }
        else
        {
            Model FinalModel;
            // Create New MyModel
            FinalModel = ModelFactory.createDefaultModel();
            MyCopier = new Copy_SVN(MyBundle2Export);

            MyCopier.Generate_Diagram_and_Model(FinalModel);
            KeyValuePair ThisNeed = (KeyValuePair) jCB_Needs.getSelectedItem();
            Resource NewBundle = MyCopier.cloneBundle(MyModel, FinalModel, MyBundle2Export, RequiredFCs, ThisNeed.Get_Label());
            export_this_model(FinalModel);
            
        }
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton8ActionPerformed
        // TODO add your handling code here:

        jPanel_Tradde_off.setVisible(true);

        // Start the critique step for the "selected" service bundle.
        // Clear table
        DefaultTableModel modelTCritiqueSB = new DefaultTableModel();
        ((DefaultTableModel)jTCritique_SB.getModel()).setRowCount(0);
        modelTCritiqueSB = (DefaultTableModel) jTCritique_SB.getModel();
        
        KeyValuePair ThisBundle = null;
        if (jT_SBs.getCellSelectionEnabled())
        {
            int rowIndex = jT_SBs.getSelectedRow();
            int colIndex = jT_SBs.getSelectedColumn();

            ThisBundle = (KeyValuePair) jT_SBs.getValueAt(rowIndex, colIndex);
            System.out.println("Selected Bundle: " + ThisBundle.toString());
            //String SLabel = new String("Services:");
            

            jL_TradeoffC.setText("Trade-off for Service Value Network : " + ThisBundle.toString());

            // Filling Critique Table
            Vector<KeyValuePair> MyRow;
            
            Vector<Resource> TheseFCs = new Vector<Resource>();
            Resource MyBundle = MyModel.getResource(ThisBundle.Get_URI());
            MyBundle2Export = MyBundle;

            TheseFCs = MyRDFU.getFCsFromBundle(MyBundle, MyModel);
            KeyValuePair Dummy = null;
            KeyValuePair MyFC  = null;

            Vector<Resource> TheseServices = MyRDFU.getServicesFromBundle(MyBundle, MyModel);
            int NumServices = TheseServices.size();
            
            if(!TheseFCs.isEmpty())
            {
                System.out.println("Number of FCs: " + TheseFCs.size());

                String Header_FCs = new String("Functional Consequences : " + TheseFCs.size());
                jTCritique_SB.getColumnModel().getColumn(1).setHeaderValue(Header_FCs);


                for(int i = 0; i < TheseFCs.size(); i++)
                {
                    MyRow = new Vector<KeyValuePair>();

                    MyRow.add(Dummy);
                    Resource ThisFC = TheseFCs.get(i);
                    MyFC = new KeyValuePair(ThisFC.getURI(),ThisFC.getProperty(B2B.e3_has_name).getObject().toString());
                    MyRow.add(MyFC);
                    
                    modelTCritiqueSB.addRow(MyRow);

                    modelTCritiqueSB.setValueAt(DefaultScore, i, 2);

                }

                sortTableColumn(jTCritique_SB,1);

                for (int i = 0; i < NumServices; i ++)
                {
                    Resource ThisService = TheseServices.get(i);
                    KeyValuePair ThisKVPService = new KeyValuePair(ThisService.getURI().toString(),ThisService.getProperty(B2B.e3_has_name).getObject().toString());
                    jTCritique_SB.setValueAt(ThisKVPService, i, 0);
                }

            }
            else
            {
                System.out.println("HOUSTON we have problems, there are no FCs associated to this bundle");
            }
            
        }
        else
        {
            System.out.println("Impossible to determine column and row");
        }
        
    }//GEN-LAST:event_jToggleButton8ActionPerformed

    private void jToggleButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton9ActionPerformed
        // TODO add your handling code here:

        // Get Scores for each consequence
        int NumRows = jTCritique_SB.getRowCount();
        //System.out.println("\n There are " + NumRows + " FCs ");
        Vector<KeyValuePair> PreferencesFCs = new Vector<KeyValuePair>();

        for(int i = 0; i < NumRows; i++)
        {
            //KeyValuePair ThisScore = (KeyValuePair) jTCritique_SB.getValueAt(i, 2);
            KeyValuePair ThisFC = (KeyValuePair) jTCritique_SB.getValueAt(i, 1);
            //String SThisScore = (String) jTCritique_SB.getValueAt(i, 2);
            int ThisScore = (Integer) jTCritique_SB.getValueAt(i, 2);

            KeyValuePair MyTriple = new KeyValuePair(ThisFC.Get_URI(), ThisFC.Get_Label(), ThisScore);
            PreferencesFCs.add(MyTriple);

        }
        
        // Compute the culpit
        // MyBundle2Export is the bundle being critiqued
        Vector<Resource> NewFCs = MyRDFU.computeCulpit(PreferencesFCs,MyModel);
        Vector<Resource> TmpFCs = new Vector<Resource>();
        // Once we get the newFCs modify
        //RequiredFCs = NewFCs;
        if(NewFCs.size() > 0)
        {
            //System.out.println("\n\n New FCs  " + NewFCs.size());
            for(int i = 0; i < NewFCs.size(); i++)
            {
               Resource ThisFC = NewFCs.get(i);
               String ThisFCName = ThisFC.getProperty(B2B.e3_has_name).getObject().toString();
               //System.out.print("\n FC: " + ThisFCName + " \t " + ThisFC.getURI());
               Resource TmpFC = MyB2B.Look_for_Resource(MyB2B.FConsequence, B2B.e3_has_name, ThisFCName, modelSupplier);
               
               if(TmpFC != null)
               {
                   TmpFCs.add(TmpFC);
               }
               else
               {
                   // BIG ERROR - no FC in model supplier?!!! Dit mag niet
               }

            }
        }

        if(TmpFCs.size() > 0)
        {
            // Create New Functional Consequence
            // Add it to jCB_GFCs - jCB_GFCs.addItem(new KeyValuePair(FC_URI, ThisFC));
            Resource New_Want = MyB2B.Generate_Want(model, new String("New Want - "+FC_ID));
            Resource New_FC = MyB2B.Generate_Functional_Consequence(model, new String("New FCs - "+FC_ID));
            FC_ID++;
            jCB_GFCs.addItem(new KeyValuePair(New_FC.getURI(), New_FC.getProperty(B2B.e3_has_name).getObject().toString()));
            System.out.println("\n Number of new FCs = " + TmpFCs.size());
            for(int i = 0; i < TmpFCs.size(); i++)
            {
               Resource ThisFC = TmpFCs.get(i);
               String ThisFCName = ThisFC.getProperty(B2B.e3_has_name).getObject().toString();
               System.out.print("\n FC: " + ThisFCName + " \t " + ThisFC.getURI());

               Resource NewFC2 = MyB2B.Generate_Functional_Consequence(model, ThisFCName);

               if(i == 0)
               {
                   // Create Link with the first FC
                   model.add(New_FC, B2B.consists_of, NewFC2);
                   model.add(NewFC2, B2B.has_want, New_Want);
                   model.add(New_Want, B2B.has, NewFC2);
               }
               else
               {
                   // Create lInk with Want
                   model.add(NewFC2, B2B.has_want, New_Want);
                   model.add(New_Want, B2B.has, NewFC2);
               }
               
            }
        }
        // Adapt interface ---
        
    }//GEN-LAST:event_jToggleButton9ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jCB_GFCs;
    private javax.swing.JComboBox jCB_Needs;
    private javax.swing.JLabel jL_TradeoffC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabelServiceB;
    private javax.swing.JLabel jLabelTmp;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel_OldControls;
    private javax.swing.JPanel jPanel_Tradde_off;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JToggleButton jTB_SortP;
    private javax.swing.JToggleButton jTB_SortR;
    private javax.swing.JTable jTCritique_SB;
    private javax.swing.JTable jT_QCs;
    private javax.swing.JTable jT_SBs;
    private javax.swing.JTable jT_Wants;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToggleButton jToggleButton9;
    // End of variables declaration//GEN-END:variables

    public void InitCombo_Needs()
    {
        jCB_Needs.removeAllItems();
    }

    public Object makeObj(final String item)
    {
        return new Object() {@Override public String toString() { return item; } };
    }

    //Vector<Resource> chooseGroupsOfConsequencesViaWants(Vector<Resource> chosenConsequence, Model model)
    public void GetGroupsOfConsequencesViaWants(Vector<Resource> chosenConsequence, Model model)
    {
        //enables a consumer to choose a group of consequences, where the grouping is based on all consequences contained in a specific want
        //find all wants for consequence

        // Clear table for Wants
        // Remove Columns

        //DefaultTableModel model = new MyDefaultTableModel();
        DefaultTableModel modelTWants = new DefaultTableModel();
        jT_Wants.setModel(modelTWants);
        ((DefaultTableModel)jT_Wants.getModel()).setRowCount(0);
        modelTWants = (DefaultTableModel) jT_Wants.getModel();
        
        Vector<Resource> detailedConsequences = MyRDFU.getRelatedObjects(chosenConsequence, model, "http://www.cs.vu.nl/~gordijn/e3value#consists_of");
        Vector<Vector> consequenceGroups = new Vector<Vector>();

        int NumSplits = detailedConsequences.size();
        int MaxWants  = 0;
        int MaxNumFCs = 0;
        
        Vector<Vector<KeyValuePair>> GroupFCs = new Vector<Vector<KeyValuePair>>();

        for (int i = 0; i< NumSplits; i++)
        {
            Resource ThisFC = detailedConsequences.get(i);

            System.out.println("\n FC: " + ThisFC.getProperty(B2B.e3_has_name).getObject().toString());

            Vector<Resource> TmpVFC = new Vector<Resource>();
            TmpVFC.add(ThisFC);
            Vector<Resource> WantxFC = MyRDFU.getRelatedObjects(TmpVFC, model, "http://www.cs.vu.nl/~gordijn/e3value#has_want");
            if(WantxFC.size() > MaxWants)
            {
                MaxWants = WantxFC.size();
                
            }
            for(int j = 0; j < WantxFC.size(); j++)
            {
                Resource ThisWant = WantxFC.get(j);
                System.out.println("\n\t Want: " + ThisWant.getProperty(B2B.e3_has_name).getObject().toString());
                Vector<Resource> TmpWant = new Vector<Resource>();
                TmpWant.add(ThisWant);
                Vector<Resource> MoreFCs = MyRDFU.getRelatedObjects(TmpWant, model, "http://www.cs.vu.nl/~gordijn/e3value#has");
                if(MoreFCs.size() > MaxNumFCs)
                {
                    MaxNumFCs = MoreFCs.size();
                }
                Vector<KeyValuePair> TheseFCs = new Vector<KeyValuePair>();
                for(int k = 0; k < MoreFCs.size(); k++)
                {
                    Resource LowFC = MoreFCs.get(k);
                    System.out.println("\n\t\t FC: " + LowFC.getProperty(B2B.e3_has_name).getObject().toString());
                    KeyValuePair KLowFC = new KeyValuePair(LowFC.getURI(),LowFC.getProperty(B2B.e3_has_name).getObject().toString());
                    TheseFCs.add(KLowFC);
                }// End - for (k = 0
                GroupFCs.add(TheseFCs);
            }// End - for (j = 0
        }// End - for (i = 0
        
        //
        System.out.println("\n Max Splits  = " + NumSplits);
        System.out.println("\n Max Wants   = " + MaxWants);
        System.out.println("\n Max Num FCs = " + MaxNumFCs);

        //modelTWants.addColumn(model, GroupFCs);
        
        for(int i = 0; i < GroupFCs.size(); i++)
        {
            System.out.println("\n Adding Column " + i);
            modelTWants.addColumn(i, GroupFCs.get(i));
        }

        
        /*
        for (int i = 0; i< detailedConsequences.size(); i++)
        {
            Vector<Resource> blaat = new Vector<Resource>();
            blaat.add(detailedConsequences.get(i));
            Vector<Resource> wantContainingDetailedConsequence =  MyRDFU.getRelatedObjects(blaat, model, "http://www.cs.vu.nl/~gordijn/e3value#has_want");
            for (int j = 0; j < wantContainingDetailedConsequence.size(); j ++)
            {
                // Setting Header
                Resource RWant = wantContainingDetailedConsequence.get(j);
                //String ThisWant = MyRDFU.getLiteral(wantContainingDetailedConsequence.get(j), "http://www.cs.vu.nl/~gordijn/e3value#e3_has_name");
                String ThisWant = RWant.getProperty(B2B.e3_has_name).getObject().toString();
                
                KeyValuePair MyWant = new KeyValuePair(RWant.getURI().toString(), "GC - " + ThisWant);
                //jT_Wants.getColumnModel().getColumn(j).setHeaderValue(ThisWant);
                jT_Wants.getColumnModel().getColumn(j).setHeaderValue(MyWant);
                
                // Setting Content
                String FirstFC = MyRDFU.getLiteral(detailedConsequences.get(i),"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name" );
                Resource R_FirstFC = detailedConsequences.get(i);
                KeyValuePair MyFirstFC = new KeyValuePair(R_FirstFC.getURI().toString(),FirstFC);
                Vector<KeyValuePair> MyFCs = new Vector<KeyValuePair>();
                MyFCs.add(MyFirstFC);
                //if(i == 0)
                    modelTWants.addRow(MyFCs);
                //jT_Wants.setValueAt(MyFirstFC, 0, j);

                // More FCs
                Vector<Resource> want = new Vector<Resource>();
                want.add(wantContainingDetailedConsequence.get(j));
                if (MyRDFU.getRelatedObjects(want, model, "http://www.cs.vu.nl/~gordijn/e3value#has").size()> 1)
                {
                    ////System.out.println( "This want also has the following consequences: ");
                    Vector<Resource> bladiebla = MyRDFU.getRelatedObjects(want, model, "http://www.cs.vu.nl/~gordijn/e3value#has");

                    // In case there are double links
                    Vector<Resource> TmpBladiebla = new Vector<Resource>();
                    for(int k = 0; k <bladiebla.size(); k ++ )
                    {
                        Resource ThisFC = bladiebla.get(k);
                        if(!TmpBladiebla.contains(ThisFC))
                            TmpBladiebla.add(ThisFC);
                    }
                    
                    bladiebla = TmpBladiebla;

                    //create a new Vector of consequences, so that you keep additional consequences of two wants seperated
                    blaat = new Vector<Resource>();
                    blaat.addAll(bladiebla);
                    bladiebla.removeElement(detailedConsequences.get(i));
                    Vector<Resource> qualityConsequencesForWant2 = new Vector<Resource>();
                    for (int k = 0; k <bladiebla.size(); k ++ )
                    {
                        if( MyRDFU.getType(model, "quality_consequence").contains(bladiebla.get(k)))
                        {
                            qualityConsequencesForWant2.add(bladiebla.get(k)); bladiebla.removeElementAt(k);
                        }
                    }
                    //printVectorLitsBulleted(bladiebla,"http://www.cs.vu.nl/~gordijn/e3value#e3_has_name");
                    
                    if(i == 0)
                    {
                        for (int k = 0; k <bladiebla.size(); k ++ )
                        {
                            Resource ThisFC = bladiebla.get(k);
                            KeyValuePair KVFC = new KeyValuePair(ThisFC.getURI().toString(),ThisFC.getProperty(B2B.e3_has_name).getObject().toString());
                            //jT_Wants.setValueAt(KVFC, k+1, j);
                            MyFCs = new Vector<KeyValuePair>();
                            MyFCs.add(KVFC);
                            modelTWants.addRow(MyFCs);
                        }
                    }   
                }// End - if (MyRDFU.getRelatedObjects(want, model, "http://www.cs.vu.nl/~gordijn/e3value#has").size()> 1)
                else
                {
                    blaat = new Vector<Resource>();
                    blaat.add(detailedConsequences.get(i));
                } //else is necessary to reinitialize blaat
                consequenceGroups.add(blaat);
                
            }// End - for (j = 0
        }// End - for (int i = 0 ....
        */

    }// End GetGroupsofConsequencesviaWants

    public void sortAllRowsBy(DefaultTableModel model, int colIndex, boolean ascending)
    {
        Vector data = model.getDataVector();
        Collections.sort(data, new ColumnSorter(colIndex, ascending));
        model.fireTableStructureChanged();
    }

    public void sortThisColumn(int Column)
    {
        jT_SBs.setAutoCreateColumnsFromModel(false);

        // Sorting table
        DefaultTableModel modelTSB = new DefaultTableModel();
        modelTSB = (DefaultTableModel) jT_SBs.getModel();
        sortAllRowsBy(modelTSB, Column, false);
    }

    public void load_catalogues()
    {
        // Loading catalogues
        jTextArea1.append("Loading catalogues" + newline);

        // create an empty model
        model = ModelFactory.createDefaultModel();
        jTextArea1.append("After creating empty model " + newline);

        // use the FileManager to find the input file
        model = FileManager.get().readModel(model, inputFileName);

        // create an empty model
        modelSupplier = ModelFactory.createDefaultModel();
        // use the FileManager to find the input file
        modelSupplier = FileManager.get().readModel(modelSupplier, inputFileNameSupplier);

        jTextArea1.append("Before new instances " + newline);
        // To generate instances
        MyB2B = new B2B(313556);
        MyB2B.Read_Properties(modelSupplier);


        if (model == null)
        {
            jTextArea1.append("ERROR model is empty" + newline);
            throw new IllegalArgumentException( "File: " + inputFileName + " not found");
        }


        /* Get all needs and add them to the Combobox*/
        Vector<Resource> need = MyRDFU.getType(model, "need");
        InitCombo_Needs();
        for(int i = 0; i < need.size(); i++)
        {
            String ThisNeed = need.get(i).getProperty(B2B.e3_has_name).getObject().toString();
            String Need_URI = need.get(i).getURI().toString();
            jCB_Needs.addItem(new KeyValuePair(Need_URI, ThisNeed));
        }

        jT_Wants.removeAll();
        jT_QCs.removeAll();

        MyBundle2Export = null;

        // Hide some elements
        jPanel_OldControls.setVisible(false);
    }

    public void sortTableColumn(javax.swing.JTable ThisTable, int ThisColumn)
    {
        ThisTable.setAutoCreateColumnsFromModel(false);

        // Sorting table
        DefaultTableModel modelT = new DefaultTableModel();
        modelT = (DefaultTableModel) ThisTable.getModel();
        sortAllRowsBy(modelT, ThisColumn, false);    
    }

    public void export_this_model(Model ThisModel)
    {
        System.out.println("");
        System.out.println(" ============================================= ");
        System.out.println("                  M o d e l                    ");
        System.out.println(" ============================================= ");
        
        MyCopier.Fill_Diagram_and_Model(ThisModel);
        ThisModel.setNsPrefix("a", MyB2B.e3value);
        ThisModel.write(System.out);
        System.out.println(" ID : " + MyCopier.getID() );
        
        // Date and time
        String DATE_FORMAT_NOW = "yyyy-MM-dd-HH:mm:ss";
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        System.out.println("TIME: " + sdf.format(cal.getTime()) );
        String DATETIME = new String(sdf.format(cal.getTime()));
        // FILE
        try
        {
            FileOutputStream fos   = new FileOutputStream("MySVN-" + DATETIME + ".rdf");
            //FileOutputStream fos   = new FileOutputStream("MySVN.rdf");
            OutputStreamWriter out = new OutputStreamWriter(fos,"UTF-8");
            ThisModel.write(out);
        }
        catch (Exception e)
        {
            System.out.println(" RDF FILE COULD NOT BE CREATED ");
        }
    }

    public void print_all_bundles()
    {
        System.out.println(" ============================================= ");
        System.out.println("                  M o d e l                    ");
        System.out.println(" ============================================= ");

        MyB2B.Fill_Diagram_and_Model(MyModel);
        MyModel.setNsPrefix("a", MyB2B.e3value);
        //MyModel.write(System.out);
        System.out.println(" ID : " + MyB2B.getID() );

        // Date and time
        String DATE_FORMAT_NOW = "yyyy-MM-dd-HH:mm:ss";
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT_NOW);
        System.out.println("TIME: " + sdf.format(cal.getTime()) );
        String DATETIME = new String(sdf.format(cal.getTime()));
        // FILE
        try
        {
            //FileOutputStream fos   = new FileOutputStream("AllBundles-" + DATETIME + ".rdf");
            FileOutputStream fos   = new FileOutputStream("AllBundles.rdf");
            OutputStreamWriter out = new OutputStreamWriter(fos,"UTF-8");
            MyModel.write(out);
        }
        catch (Exception e)
        {
            System.out.println(" RDF FILE COULD NOT BE CREATED ");
        }
    }
}
